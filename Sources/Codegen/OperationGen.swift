import GraphQL
import OrderedCollections

/// Converts a regular object ``Decl`` generated by ``gen(object:named:typename:fragmentInfo:)`` into a ``Queryable`` one.
func attach(operation: OperationDefinition, to decl: Decl, schema: GraphQLSchema, fragmentInfo: FragmentInfo) -> Decl {
    guard case let .struct(name, decls, conforms) = decl else {
        fatalError("Can only attach operation stuff to struct Decls")
    }
    var extraDecls: [Decl] = []
    if !operation.variableDefinitions.isEmpty {
        let variableDecls = operation.variableDefinitions.map { varDef -> Decl in
            let type = typeFromAST(schema: schema, inputTypeAST: varDef.type)!
            return Decl.`let`(
                name: varDef.variable.name.value,
                type: genType(for: type),
                initializer: varDef.defaultValue.map(convertToExpr)
            )
        }
        extraDecls.append(.struct(
            name: "Variables",
            decls: variableDecls,
            conforms: ["Encodable", "Equatable"]
        ))
    }
    
    let fragmentMap: OrderedDictionary<String, FragmentDefinition> = fragmentInfo.definitions.reduce(into: [:]) {
        $0[$1.name.value] = $1
    }
    let fragmentsString = allUsedFragments(in: operation.selectionSet, fragments: fragmentMap)
        .map { fragmentMap[$0]!.printed }.joined(separator: "\n")
    let queryString = operation.printed + "\n" + fragmentsString + "\n"
    extraDecls.append(.`let`(
        name: "query",
        initializer: .stringLiteral(queryString, multiline: true),
        isStatic: true
    ))
    
    return .struct(
        name: name,
        decls: decls + extraDecls,
        conforms: ["Queryable"] + conforms
    )
}


private func allUsedFragments(in selectionSet: SelectionSet, fragments: OrderedDictionary<String, FragmentDefinition>) -> OrderedSet<String> {
    selectionSet.selections.reduce([]) { acc, selection in
        switch selection {
        case let .field(field):
            if let selectionSet = field.selectionSet {
                return acc.union(allUsedFragments(in: selectionSet, fragments: fragments))
            }
            return acc
        case let .fragmentSpread(fragmentSpread):
            let fragment = fragments[fragmentSpread.name.value]!
            return acc.union([fragment.name.value]).union(allUsedFragments(in: fragment.selectionSet, fragments: fragments))
        case let .inlineFragment(inlineFragment):
            return acc.union(allUsedFragments(in: inlineFragment.selectionSet, fragments: fragments))
        }
    }
}
